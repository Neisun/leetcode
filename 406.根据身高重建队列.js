/*
 * @lc app=leetcode.cn id=406 lang=javascript
 *
 * [406] 根据身高重建队列
 */

// @lc code=start
/**
 * @param {number[][]} people
 * @return {number[][]}
 */
var reconstructQueue = function(people) {
  // 两个维度同时考虑，太难搞了
  /**
   * [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
   * 首先找[h,k]中k为0的一项，作为第一项，
   * 找到[7,0] [5,0] 选其中比较小的那个座位第一项 [5, 0]
   * 确定了第一项 [5,0]
   * 找第二项 [h,k] 如果h > 5 那么必然是 [h, 0(i - 1)] 如果 h < 5 那么必然是 [h, 1(i)] 找到那些呢?
   * h > 5 找打 [7,0] [7,1] [6,1]
   * h < 5 找到 [4,4]
   * 按照上述条件只能找到 [7,0]
   * 找第三项 [h,k] 如果 h > 7 那么必然是 [h, 0] 如果 h < 7 那么怎么判断呢
   */

  // 两个维度分别考虑呢？
  /**
   * 先按个数的维度从小到大排序
   * [7,0] [5,0] [7,1] [6,1] [5,2] [4,4]
   * 
   * 按身高排序呢？
   * [7,0] [7,1] [6,1] [5,0] [5,2] [4,4]
   * 然后遍历来看位置
   * 对于 [7,0] 没问题
   * 对于 [7,1] 没问题
   * 对于 [6,1] 应该放在第一个位置 即 [7,0] [6,1] [7,1]
   * 对于 [5,0] 应在放在第0个位置 即 [5,0] [7,0] [6,1] [7,1]
   * 对于 [5,2] 应该放在第2个位置 即 [5,0] [7,0] [5,2] [6,1] [4,4] [7,1]
   */
  // 定义结果集
  const result = [];
  // 按照身高排序 降序排列
  people.sort((a, b) => {
    if (a[0] > b[0]) {
      return -1;
    } else if (a[0] < b[0]) {
      return 1;
    } else {
      return a[1] - b[1];
    }
  })

  // 遍历组合 然后按照位置插入
  people.forEach(item => {
    result.splice(item[1], 0, item);
  })

  return result;
};
// @lc code=end
const people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]];
reconstructQueue(people);


